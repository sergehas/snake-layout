$grid-h-gap: 60px;
$grid-v-gap: 30px;
$item-min-width: 130px;

:root {
    --grid-v-gap: #{$grid-v-gap};
    --grid-h-gap: #{$grid-h-gap};
    --item-min-width: #{$item-min-width};
    --line-thickness: 4px; //use a multiple of 2 to avoid glitches
    --line-radius: calc(var(--grid-h-gap) * 2);
}

body {
    font:
        400 14px "Arial",
        sans-serif;
    counter-reset: num;
    box-sizing: border-box;
}

.item {
    min-width: var(--item-min-width);
    margin: 0;
    padding: 0;
    display: flex;
    align-items: center;
    // default style
    &::before,
    &::after {
        border-color: lightgray;
        border-style: dotted;
    }
    //item content
    .card {
        width: 100%;
        border: 1px solid lightgray;
        color: lightgray;
        background-color: rgb(231, 231, 231);
        border-radius: 10px;
        padding: 6px;
        max-height: 100px;
        min-height: 40px;

        h3 {
            margin: 0;
            padding: 0;
            // font: 400 14px "Arial", sans-serif;
        }
        .content {
            text-overflow: ellipsis;
            overflow: hidden;
            // Addition lines for 2 line or multiline ellipsis
            display: -webkit-box !important;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            white-space: normal;
        }
        span.tag {
            background-color: white;
            border-radius: 50%;
            font-weight: 900;
            font-size: 12px;
            width: 26px;
            height: 26px;
            text-align: center;
            vertical-align: middle;
            display: table-cell;
            margin: 6px;
        }
    }
    &.success {
        &::after,
        &::before {
            border-color: rgb(4, 204, 4);
            border-style: solid;
        }
        .card {
            border-color: rgb(4, 204, 4);
            background-color: rgb(4, 204, 4);
            color: white;
            span.tag {
                color: rgb(4, 204, 4);
            }
        }
    }
    &.warning {
        &::after,
        &::before {
            border-color: rgb(204, 191, 4);
            border-style: solid;
        }
        .card {
            border-color: rgb(204, 191, 4);
            background-color: rgb(204, 191, 4);
            color: white;
            span.tag {
                color: rgb(204, 157, 4);
            }
        }
    }
    &.failure {
        &::after,
        &::before {
            border-color: rgb(219, 8, 18);
            border-style: solid;
        }
        .card {
            border-color: rgb(219, 8, 18);
            background-color: rgb(219, 8, 18);
            color: white;
            span.tag {
                color: rgb(219, 8, 18);
            }
        }
    }
}

/// layout
.flex-container {
    display: grid;
    /*define the number of column*/
    grid-auto-flow: dense;
    /* this is important to fill all the space*/
    grid-row-gap: var(--grid-v-gap);
    grid-column-gap: var(--grid-h-gap);
    /* padding: 10px; */
    margin-right: calc(var(--line-thickness) + var(--grid-h-gap));
    margin-left: calc(var(--line-thickness) + var(--grid-h-gap));
}

.item {
    position: relative;
    &::before,
    &::after {
        border-width: var(--line-thickness);
        display: block;
        position: absolute;
    }
    &::after {
        content: "";
    }
}

@mixin gridify($cols) {
    .flex-container {
        grid-template-columns: repeat($cols, 1fr);
    }

    @for $i from 0 through $cols - 1 {
        // even line items (display order: from right to left)
        .item:nth-child(#{$cols * 2}n + #{$cols + 1 + $i}) {
            grid-column: #{$cols - $i};
            &:after {
                @if ($cols + 1 + $i) != ($cols * 2) {
                    /*even line : from item to next: the - line, from right to left*/
                    top: 50%;
                    right: 100%;
                    transform: translateY(calc(-0.5 * var(--line-thickness)));
                    width: calc(0% + var(--grid-h-gap));
                    height: 0px;
                    border-left: none;
                    border-top: none;
                    border-right: none;
                }
            }
            // &:after {
            // }

            //when last item is in an even line
            &:last-child::after {
                border: none;
            }
        }
        // odd line items (display order: from left to right)
        .item:nth-child(#{$cols * 2}n + #{ $i + 1}) {
            @if $i + 1 != $cols {
                /*odd line : from item to next: the - line, from left to right*/
                &:after {
                    bottom: 50%;
                    left: 100%;
                    transform: translateY(calc(0.5 * var(--line-thickness)));
                    width: calc(0% + var(--grid-h-gap));
                    height: 0px;
                    border-left: none;
                    border-top: none;
                    border-right: none;
                }
            }
            //when is last item  is in an odd line
            &:last-child::after {
                border: none;
            }
        }
    }

    // end & start of rows
    /*odd line last visually (right): from even line right top to bottom line right  (the ⮧ line)*/
    .item:nth-child(#{$cols * 2}n + #{$cols}) {
        &:after {
            top: 50%;
            left: 100%;
            transform: translateY(calc(-0.5 * var(--line-thickness)));
            border-top-right-radius: var(--line-radius);
            border-left: none;
            border-bottom: none;
            width: calc(var(--grid-h-gap));
            height: calc((100% + var(--grid-v-gap) - var(--line-thickness)) * 0.5);
        }
    }
    /*odd line last visually (right): from odd line right bottom to even line right  (the ⮠ line*/
    .item:nth-child(#{$cols * 2}n + #{$cols + 1}) {
        &:before {
            content: "";
            bottom: 50%;
            left: 100%;
            transform: translateY(calc(0.5 * var(--line-thickness)));
            border-bottom-right-radius: var(--line-radius);
            border-left: none;
            border-top: none;
            width: calc(0% + var(--grid-h-gap));
            height: calc((100% + var(--grid-v-gap) - var(--line-thickness)) * 0.5);
        }
    }

    /*even line 1st visually (left): from even line left  to odd line right  (the ⮦ line*/
    .item:nth-child(#{$cols * 2}n) {
        &:after {
            top: 50%;
            right: 100%;
            transform: translateY(calc(-0.5 * var(--line-thickness)));
            // border: var(--line-thickness) solid red;
            border-top-left-radius: var(--line-radius);
            border-right: none;
            border-bottom: none;
            width: calc(0% + var(--grid-h-gap));
            height: calc((100% + var(--grid-v-gap) - var(--line-thickness)) * 0.5);
        }
    }
    /*odd line 1st visually (left): from even line left bottom to odd line left  (the ⮡ line*/
    .item:nth-child(#{$cols *2}n + 1) {
        &:before {
            content: "";
            bottom: 50%;
            right: 100%;
            transform: translateY(calc(0.5 * var(--line-thickness)));
            // border: var(--line-thickness) solid blue;
            border-bottom-left-radius: var(--line-radius);
            border-right: none;
            border-top: none;
            width: calc(0% + var(--grid-h-gap));
            height: calc((100% + var(--grid-v-gap) - var(--line-thickness)) * 0.5);
        }
    }

    .item:first-child:before {
        border: none;
    }
}
@mixin columnify($max-screen-width, $item-min-width, $h-gap) {
    /*automatically compute the number of cols*/
    $col-width: $item-min-width + $h-gap;
    $nb-cols: round($max-screen-width / $col-width);

    @for $i from 1 through $nb-cols {
        $screen-min: $col-width * $i + $h-gap;
        $screen-max: $screen-min + $col-width -1;
        @if $i ==1 {
            @media screen and (max-width: $screen-max) {
                @include gridify($i);
            }
        } @else if $i==$nb-cols {
            @media screen and (min-width: $screen-min) {
                @include gridify($i);
            }
        } @else {
            @media screen and (min-width: $screen-min) and (max-width: $screen-max) {
                @include gridify($i);
            }
        }
    }
}
@include columnify(1920px, $item-min-width, $grid-h-gap);
